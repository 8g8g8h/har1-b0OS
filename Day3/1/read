10シリンダまで読む
harib00dまでの内容

メモリでは、レジスタ(BX)ひとつだけで示すと64KBしか示せない
そこでEBXというものができた。
これは、ES:BXとする

ここではまだメモリに関してはリアルモードなのでメモリは1MB(1114095byte)までしか読めない
ちなみに計算の仕方は[ES:BX]で計算する
以下の式で計算される 
address=ES*16+bx

メモリが読み込まれるのは、INT13になるまでに設定した値が、使われる。


順番：
①:電源起動
②:ブートセクタを7c00に読み込む
③:そこで、7c00に書いてある命令を順次実行する
④:その際に、セクタを10セクタ分を読み込む。ここで場所を指定する際にバッファアドレスでセクタ2を8200に読み込む用設定する。ブートセクタであるセクタ1は、8000が先頭になるように設定している。実際ここに読み込む。
⑤:ブートセクタが読み終わったら、8200に移動するように命令がある
⑥:OS本体である8200の命令を実行する

cf)https://hackmd.io/@ht5XugipSwSVRPoFySpn6Q/B13I1hHRH#30%E6%97%A5OS%E8%87%AA%E4%BD%9C%E5%85%A5%E9%96%80%E3%81%AE%E3%81%93%E3%81%A8%E3%81%A8%E3%81%8B

ここでメモリについて整理しておく
7c00-7dff　ブートセクタが読み込まれる(実行されるために読み込まれる。そしてここを見て、実行する)

8000-81ff  ここにはOS(hari-b0.img)の最初の部分であるブートセクタの内容をこの部分に読み込む(内容は実行しないだけでただ読み込むだけ)


8200-34fff  フロッピーディスクの10シリンダの内容が書かれている

ここではブートセクタしかやっていないのでブートしたとしか出てこない

INT13はビデオ関連の割り込み
このとき以下のことを指定する必要がある
AHの指定(モード指定)
ALの指定(処理するセクタ数)
CHの指定
CLの指定
DHの指定
ES:BXの指定(これでアドレス指定)

これらを指定してから割り込み(INT13)を行うことでセクタを読む、書くなどができる

ここでアドレスを0x20足しているのはセクタやシリンダを一個読み進めるのに対して0x200(0x20*16+bx(0))すすめることができるためである

これでブートセクタの内容がメモリは0x34fffまで読み込まれる(3-4まで)

ここでhari-b0.imgの中にファイルを入れる場合、その内容は先頭から0x4200番から書き込まれている
