     1                                  ;ブートセクタの情報(16bitmode)の内容
     2                                  
     3                                  BOTPAK  EQU    0x00280000    ; BOOTPACK     | bootpackのロード先
     4                                  DSKCAC  EQU    0x00100000    ; DISK CACHE   | ディスクキャッシュの場所
     5                                  DSKCAC0 EQU    0x00008000    ; DISK CACHE 0 | ディスクキャッシュの場所（リアルモード）
     6                                  
     7                                  ; BOOT_INFO関係
     8                                  ; > メモしている場所は0x0ff0番地周辺ですが、メモリマップによるとこのへんも誰にも使われていないようでした
     9                                  CYLS    EQU     0x0ff0      ; ブートセクタが設定する
    10                                  LEDS    EQU     0x0ff1      ; LED STATE
    11                                  VMODE   EQU     0x0ff2      ; VIDEO MODE | 色数に関する情報（何ビットカラーか）
    12                                  SCRNX   EQU     0x0ff4      ; SCREEN X   | 解像度X
    13                                  SCRNY   EQU     0x0ff6      ; SCREEN Y   | 解像度Y
    14                                  VRAM    EQU     0x0ff8      ; VIDEO RAM  | グラフィックバッファの開始番地
    15                                  
    16                                          ;=======================================================================
    17                                          ORG     0xc200      ; 0xc200 = 0x8000 + 0x4200
    18                                                              ; イメージファイルの 0x4200 アドレス番目に書き込まれている
    19                                                              ; また,先で 0x8000 以降を使うことに決めている
    20                                  
    21                                          ;=======================================================================
    22                                          ; [INT(0x10); ビデオ関係](http://oswiki.osask.jp/?%28AT%29BIOS#n5884802)
    23                                          ; ビデオモード設定
    24                                          ;   AH = 0x00;
    25                                          ;   AL = モード： (マイナーな画面モードは省略しています)
    26                                          ;     0x03：16色テキスト、80x25
    27                                          ;     0x12：VGAグラフィックス、640x480x4bitカラー、独自プレーンアクセス
    28                                          ;     0x13：VGAグラフィックス、320x200x8bitカラー、パックドピクセル
    29                                          ;     0x6a：拡張VGAグラフィックス、800x600x4bitカラー、独自プレーンアクセス（ビデオカードによってはサポートされない）
    30                                          ;   戻り値：なし
    31 00000000 B013                            MOV     AL, 0x13    ; VGA graphics, 320x200x(8 bit color)
    32 00000002 B400                            MOV     AH, 0x00
    33 00000004 CD10                            INT     0x10
    34                                  
    35                                          ;=======================================================================
    36                                          ; 画面モードをメモする
    37 00000006 C606F20F08                      MOV     BYTE [VMODE], 8           ; Video MODE
    38 0000000B C706F40F4001                    MOV     WORD [SCRNX], 320         ; SCReeN X
    39 00000011 C706F60FC800                    MOV     WORD [SCRNY], 200         ; SCReeN Y
    40 00000017 66C706F80F00000A00              MOV     DWORD [VRAM], 0x000a0000  ; Video RAM
    41                                                                            ; > VRAMは0xa0000～0xaffffの64KBです。厳密に言うと、320x200=64000なので、62.5KBですが.
    42                                                                            ;
    43                                                                            ; > [VRAM]に 0xa0000 を入れているのですが、PC の世界で VRAM というのはビデオラムのことで
    44                                                                            ; > 「video RAM」と書き、画面用のメモリのことです。このメモリは、もちろんデータを記憶することがい
    45                                                                            ; > つも通りできます。しかしVRAMは普通のメモリ以上の存在で、それぞれの番地が画面上の画素に対応
    46                                                                            ; > していて、これを利用することで画面に絵を出すことができるのです。
    47                                  
    48                                          ;=======================================================================
    49                                          ; [INT(0x16); キーボード関係 - (AT)BIOS - os-wiki](http://oswiki.osask.jp/?%28AT%29BIOS#lb9f3e72)
    50                                          ; キーロック＆シフト状態取得
    51                                          ;   AH = 0x02;
    52                                          ;   戻り値：
    53                                          ;   AL == 状態コード：
    54                                          ;     bit0：右シフト
    55                                          ;     bit1：左シフト
    56                                          ;     bit2：Ctrl
    57                                          ;     bit3：Alt
    58                                          ;     bit4：Scrollロック
    59                                          ;     bit5：Numロック
    60                                          ;     bit6：Capsロック
    61                                          ;     bit7：Insertモード
    62                                          ; BIOS (16 bit mode) から情報を取得
    63 00000020 B402                            MOV     AH, 0x02    ; キーロック＆シフト状態取得
    64 00000022 CD16                            INT     0x16        ; Keyboard BIOS
    65 00000024 A2F10F                          MOV     [LEDS], AL  ; LED State
    66                                  
    67                                          ; PICが一切の割り込みを受け付けないようにする
    68                                          ; AT互換機の仕様では、PICの初期化をするなら、
    69                                          ; こいつをCLI前にやっておかないと、たまにハングアップする
    70                                          ; PICの初期化はあとでやる
    71                                  
    72 00000027 B0FF                            MOV     AL, 0xff
    73 00000029 E621                            OUT     0x21, AL
    74 0000002B 90                              NOP                   ; OUT命令を連続させるとうまくいかない機種があるらしいので
    75 0000002C E6A1                            OUT     0xa1, AL
    76                                  
    77 0000002E FA                              CLI                   ; さらにCPUレベルでも割り込み禁止
    78                                  
    79                                          ; CPUから1MB以上のメモリにアクセスできるように、A20GATEを設定
    80                                  
    81 0000002F E8B500                          CALL waitkbdout
    82 00000032 B0D1                            MOV  AL,0xd1
    83 00000034 E664                            OUT  0x64,AL
    84 00000036 E8AE00                          CALL waitkbdout
    85 00000039 B0DF                            MOV  AL,0xdf          ; enable A20
    86 0000003B E660                            OUT  0x60,AL
    87 0000003D E8A700                          CALL waitkbdout
    88                                  
    89                                          ; プロテクトモード移行
    90                                          
    91                                          ;[INSTRSET "i486p"]    ; i486の命令まで使いたいという記述
    92                                          ; ここで指定するのではなくgccでcompileする際にi486で指定
    93                                  
    94 00000040 0F0116[2A01]                    LGDT [GDTR0]   ; 暫定GDTを設定
    95 00000045 0F20C0                          MOV  EAX,CR0
    96 00000048 6625FFFFFF7F                    AND  EAX,0x7fffffff ; bit31を0にする（ページング禁止のため）
    97 0000004E 6683C801                        OR  EAX,0x00000001 ; bit0を1にする（プロテクトモード移行のため）
    98 00000052 0F22C0                          MOV  CR0,EAX
    99 00000055 EB00                            JMP  pipelineflush
   100                                  pipelineflush:
   101 00000057 B80800                          MOV  AX,1*8   ;  読み書き可能セグメント32bit
   102 0000005A 8ED8                            MOV  DS,AX
   103 0000005C 8EC0                            MOV  ES,AX
   104 0000005E 8EE0                            MOV  FS,AX
   105 00000060 8EE8                            MOV  GS,AX
   106 00000062 8ED0                            MOV  SS,AX
   107                                  
   108                                          ; bootpackの転送
   109                                  
   110 00000064 66BE[30010000]                  MOV  ESI,bootpack ; 転送元
   111 0000006A 66BF00002800                    MOV  EDI,BOTPAK  ; 転送先
   112 00000070 66B900000200                    MOV  ECX,512*1024/4
   113                                          ;MOV  ECX, 131072
   114 00000076 E87500                          CALL memcpy
   115                                  
   116                                          ; ついでにディスクデータも本来の位置へ転送
   117                                  
   118                                          ; まずはブートセクタから
   119                                  
   120 00000079 66BE007C0000                    MOV  ESI,0x7c00  ; 転送元
   121 0000007F 66BF00001000                    MOV  EDI,DSKCAC  ; 転送先
   122 00000085 66B980000000                    MOV  ECX,512/4
   123                                          ;MOV  ECX, 128
   124 0000008B E86000                          CALL memcpy
   125                                  
   126                                          ; 残り全部
   127                                  
   128 0000008E 66BE00820000                    MOV  ESI,DSKCAC0+512 ; 転送元
   129 00000094 66BF00021000                    MOV  EDI,DSKCAC+512 ; 転送先
   130 0000009A 66B900000000                    MOV  ECX,0
   131 000000A0 8A0EF00F                        MOV  CL,BYTE [CYLS]
   132 000000A4 6669C900120000                  IMUL ECX,512*18*2/4 ; シリンダ数からバイト数/4に変換
   133                                          ;IMUL ECX, 4608
   134 000000AB 6681E980000000                  SUB  ECX,512/4  ; IPLの分だけ差し引く
   135                                          ;SUB  ECX, 128  ; IPLの分だけ差し引く
   136 000000B2 E83900                          CALL memcpy
   137                                  
   138                                          ; asmheadでしなければいけないことは全部し終わったので、
   139                                          ; あとはbootpackに任せる
   140                                          
   141                                          ; bootpackの起動
   142                                  
   143 000000B5 66BB00002800                    MOV  EBX,BOTPAK
   144 000000BB 66678B4B10                      MOV  ECX,[EBX+16]
   145 000000C0 6683C103                        ADD  ECX,3   ; ECX += 3;
   146 000000C4 66C1E902                        SHR  ECX,2   ; ECX /= 4;
   147 000000C8 7410                            JZ  skip   ; 転送するべきものがない
   148 000000CA 66678B7314                      MOV  ESI,[EBX+20] ; 転送元
   149 000000CF 6601DE                          ADD  ESI,EBX
   150 000000D2 66678B7B0C                      MOV  EDI,[EBX+12] ; 転送先
   151 000000D7 E81400                          CALL memcpy
   152                                  skip:
   153 000000DA 66678B630C                      MOV  ESP,[EBX+12] ; スタック初期値
   154 000000DF 66EA1B0000001000                JMP  DWORD 2*8:0x0000001b
   155                                  
   156                                  waitkbdout:
   157 000000E7 E464                            IN   AL,0x64
   158 000000E9 2402                            AND   AL,0x02
   159 000000EB 75FA                            JNZ  waitkbdout  ; ANDの結果が0でなければwaitkbdoutへ
   160 000000ED C3                              RET
   161                                  
   162                                  memcpy:
   163 000000EE 66678B06                        MOV  EAX,[ESI]
   164 000000F2 6683C604                        ADD  ESI,4
   165 000000F6 66678907                        MOV  [EDI],EAX
   166 000000FA 6683C704                        ADD  EDI,4
   167 000000FE 6683E901                        SUB  ECX,1
   168 00000102 75EA                            JNZ  memcpy   ; 引き算した結果が0でなければmemcpyへ
   169 00000104 C3                              RET
   170                                          ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でも書ける
   171                                  
   172 00000105 <res 0000000B>                  ALIGNB 16
   172          ******************       warning: uninitialized space declared in .text section: zeroing
   173                                  GDT0:
   174 00000110 <res 00000008>                  RESB 8    ; ヌルセレクタ
   174          ******************       warning: uninitialized space declared in .text section: zeroing
   175 00000118 FFFF00000092CF00                DW  0xffff,0x0000,0x9200,0x00cf ; 読み書き可能セグメント32bit
   176 00000120 FFFF0000289A4700                DW  0xffff,0x0000,0x9a28,0x0047 ; 実行可能セグメント32bit（bootpack用）
   177                                  
   178 00000128 0000                            DW  0
   179                                  GDTR0:
   180 0000012A 1700                            DW  8*3-1
   181 0000012C [10010000]                      DD  GDT0
   182                                  
   183                                          ALIGNB 16
   184                                  bootpack:
