10シリンダまで読む
harib00dまでの内容

ここではまだメモリに関してはリアルモードなのでメモリは1MB(1114095byte)までしか読めない
ちなみに計算の仕方は[ES:BX]で計算する
以下の式で計算される 
address=ES*16+bx

ここでメモリについて整理しておく
7c00-7dff　ブートセクタが読み込まれる

8000-81ff  ここにはOS(hari-b0.img)の最初の部分であるブートセクタの内容をこの部分のメモリにロード(読み込み)する


8200-34fff  フロッピーディスクの10シリンダの内容が書かれている

ここではブートセクタしかやっていないのでブートしたとしか出てこない

INT13はビデオ関連の割り込み
このとき以下のことを指定する必要がある
AHの指定(モード指定)
ALの指定(処理するセクタ数)
CHの指定
CLの指定
DHの指定
ES:BXの指定(これでアドレス指定)

これらを指定してから割り込み(INT13)を行うことでセクタを読む、書くなどができる

ここでアドレスを0x20足しているのはセクタやシリンダを一個読み進めるのに対して0x200(0x20*16+bx(0))すすめることができるためである

これでブートセクタの内容がメモリは0x34fffまで読み込まれる(3-4まで)

ここでhari-b0.imgの中にファイルを入れる場合、その内容は先頭から0x4200番から書き込まれている


ここまで(Day3-7)まではリアルモードであり、メモリ使える部分が少ない(1MB)。
なのでたくさんのメモリを利用するためにプロテクトモード(32bitモード)に変える必要ある
ここでBIOSはリアルモードのときしか使えないため、先に設定を済ませておく必要あり
プロテクトモードではBIOSの設定を変えることが難しいので今回先に済ませる必要あり


OS起動までの流れ
①:電源ONと同時にBIOS起動
②:BIOSの中のINT25番目が行われる(これは起動してから最初にどこの部分の読み込みを行うかどうかを決めているという内容の割り込みである)
③:割り込みベクタアドレスを読んで、この処理の内容が書かれているアドレスに移動。
④:処理の内容
読み込みが行われるための準備が行われる
ここで読み込みが行われる場所は、起動ディスクがあらかじめ決まっており、かつ設定でヘッドやシリンダが決められている(ヘッダ=0シリンダ=1)。
そしてその場所の最初のセクタを読むようになっている。ここでディスクの最後が「55aa」だった場合、「0x7c00番地」にこのセクタの内容を読み込む
④:そしてそのセクタ(ブートローダ)の処理を実行する


ここからはブートローダの内容
⑤:まず最初にINT13番を先ほどと同じ内容で実行するようになっている。
その際に引数を設定
これにより18シリンダまで読み込みを行うように設定をしている。
⑥:そして、OSの内容を起動するためにメモリのモードを変える必要がある。
そこで16bitでしか動けないBIOSのちからを借りて、ビデオに関する設定を行う。
これにより、OSを動かす際に必要な情報が設定し終わったので、OSの内容を実行していく。

nasmhead.asmはOS本体のasmの部分である。
ここで、最初はアセンブリ言語で書いていたけど、C言語で書くためにその設定を行っている＋アセンブリ言語でしかできないことを書いている。
haribote.sysはOSすべてである。
これは、asmで書かれたもの(BIOSで設定しておくべきことやC言語が動作するような設定)とC言語(OS本体が書かれる、書かれた部分)で書かれたものをくっつけただけ

