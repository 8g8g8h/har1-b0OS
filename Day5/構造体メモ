構造体について

一般的な使われ方

struct BOOTINFO{
  char b,c;

}

このような構造体があった場合には、

struct BOOTINFO binfo;

binfo.b=2; 

のようにそれぞれの変数にいろいろな値を入れていく

ここでポインタを用いた場合について考える。

struct BOOTINFO *binfo;

これにより、binfoは、番地を示す変数となった。
binfoは4byteの変数である。

番地変数になったので番地を設定してあげるところから始まる

binfo=(struct BOOTINFO *)0x0ff0;

これにより番地が設定されたのでこの構造体を用いることができる
番地を示すのではなく構造体自身を示すには、*binfoのようにやることで構造体自身、構造体の中身をいじることができる

ここでbの値を設定するには以下のようにすることができる

(*binfo).b=2

これで値を設定することはできる。

これ以外にも他の方法がある。
それをいかに示す
binfo->b

これが上記と同じことを示している。


putfont8について

ここでは、上から
0x00
0x18
といった具合で16段になっている

ここで先程の関数は、font_aという8*16を用意

ここで8では、1byteのことを示している

これをそれぞれANDを用いて1かどうかを確認してその部分を描画するようにしている。

puts_8_ascは先程の関数を
かんたんにまとめたものである。
この際に引数のSには、文字列を入れて、それぞれの文字を0x00になるまで繰り返し描画することにより文字列を表示している


sprintfも同様に示している。
ここでは、出力内容を文字列としてメモリの中に書いている

そこで先程のものを用いることにより書かれたメモリのアドレスについて描画することができる。

マウス描画について

ここで先に256byteのメモリを用意する

次に用意した部分にマウスカーソルのデータを作る

init_mouse_cursor8ではそれを行っている。

これを今度vramに書き込む作業が必要である。
その際に先程は、256として用意していた。
先程の関数では16*16の順番でデータを入れていたためにしっかり描画されないと考えた。
しかしput_boxの方で縦と横で16ずつで区切っているためにうまく描画できている。
